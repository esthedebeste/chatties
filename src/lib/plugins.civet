{ pluginVerifier, type Plugin } from ./plugins/plugin-api.civet
import ./plugins/shared.civet
// built-in plugins
{ convertFileSrc } from @tauri-apps/api/tauri
* as store from svelte/store
{ invoke } from ./api/index.civet
{ addDecoration } from ./api/decorations.civet
{ credentials } from ./api/credentials.civet
type { AutocompleteRequest } from ./autocomplete.civet
{ plugin as sevenTvPlugin } from ./plugins/7tv.civet
{ plugin as betterttvPlugin } from ./plugins/betterttv.civet
{ plugin as ffzPlugin } from ./plugins/ffz.civet
{ pluginUtils } from ./plugins/shared.civet
{ plugin as twitchNativePlugin } from ./plugins/twitch-native.civet
type { PrivMessage } from $types/message
{ allSettledWithThrow } from ./utils.civet
plugins: Plugin[] := []

function addPlugin(plugin: Plugin): void
	plugins.push plugin

console.log "Loading plugins"

addPlugin twitchNativePlugin
addPlugin ffzPlugin
addPlugin betterttvPlugin
addPlugin sevenTvPlugin
console.log "Loaded integrated twitch-native, frankerfacez, betterttv, and 7tv plugins"

do
	plugins := await invoke "get_plugins"
	await allSettledWithThrow plugins.map async (path) =>
		uri := convertFileSrc path
		content := await import /* @vite-ignore */ uri
		if !content.plugin
			throw new Error "Plugin does not export a plugin object"
		pluginVerifier.parse content.plugin
		addPlugin content.plugin
		console.log "Loaded custom plugin", JSON.stringify content.plugin.id

	console.log "Loaded", plugins.length, "plugin(s) from disk"

settingValues := new Map<string, unknown>()
export function getSetting<R>(plugin: Plugin, setting: string): R
	if !plugin.settings?[setting]
		throw new Error `Setting ${setting} does not exist on plugin ${plugin.id}.`
	cached := settingValues.get `${plugin.id}.${setting}`
	if cached !== undefined
		return cached as R
	string := localStorage.getItem `plugin.${plugin.id}.${setting}`
	if string === null
		return plugin.settings?[setting].default as R
	JSON.parse string

export function setSetting<T>(plugin: Plugin, setting: string, value: T): void
	console.log "setting", `plugin.${plugin.id}.${setting}`, "to", JSON.stringify value
	settingValues.set `${plugin.id}.${setting}`, value
	localStorage.setItem `plugin.${plugin.id}.${setting}`, JSON.stringify value

await allSettledWithThrow plugins.map async (plugin) =>
	try
		console.log `Initializing plugin ${plugin.id}...`
		await plugin.init?({
			setting: (settingId: string) => getSetting plugin, settingId
			user:
				login: () => store.get(credentials)?.login

			visual:
				user: {
					addDecoration
				}

			utils: pluginUtils
		})
	catch error
		console.error `Failed to initialize plugin ${plugin.id}:`, error


console.log "Initialized all plugins"

export async function join(channel: string)
	await allSettledWithThrow plugins.map .join?(channel);

export async function channelId(channel: string, id: string)
	await allSettledWithThrow plugins.map .channelId?(channel, id);

export function leave(channel: string): void
	for plugin of plugins
		plugin.leave?(channel)

export function message(message: PrivMessage): void
	for plugin of plugins
		plugin.message?(message)

export function autocomplete(request: AutocompleteRequest)
	plugins.flatMap .autocomplete?(request) ?? []

export function pluginsWithSettings
	plugins.filter .settings != null
